name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build development images
        run: |
          docker compose -f docker/compose.dev.yml build --parallel

      - name: Start development environment
        run: |
          docker compose -f docker/compose.dev.yml up -d
          
      - name: Wait for services to be ready
        run: |
          timeout 120 bash -c 'until docker compose -f docker/compose.dev.yml exec -T solana solana cluster-version; do sleep 2; done'
          timeout 60 bash -c 'until docker compose -f docker/compose.dev.yml exec -T evm cast block-number --rpc-url http://localhost:8545; do sleep 2; done'

      - name: Run TypeScript tests
        run: |
          docker compose -f docker/compose.dev.yml exec -T node bash -c "
            cd scripts && pnpm test --coverage
          "

      - name: Run Solana contract tests
        run: |
          docker compose -f docker/compose.dev.yml exec -T solana bash -c "
            cd contracts/solana-forge && anchor test --skip-lint
          "

      - name: Run EVM contract tests
        run: |
          docker compose -f docker/compose.dev.yml exec -T evm bash -c "
            cd contracts/evm-receiver && forge test -vvv --gas-report
          "

      - name: Run security audits
        run: |
          docker compose -f docker/compose.dev.yml exec -T solana bash -c "
            cd contracts/solana-forge && cargo audit
          "
          docker compose -f docker/compose.dev.yml exec -T evm bash -c "
            cd contracts/evm-receiver && slither . || true
          "

      - name: Run web frame tests
        run: |
          docker compose -f docker/compose.dev.yml exec -T node bash -c "
            cd web-frame && pnpm test:unit && pnpm build
          "

      - name: Cleanup
        if: always()
        run: |
          docker compose -f docker/compose.dev.yml down -v

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-22.04
    timeout-minutes: 45
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start integration environment
        run: |
          docker compose -f docker/compose.dev.yml up -d
          
      - name: Wait for services
        run: |
          timeout 120 bash -c 'until docker compose -f docker/compose.dev.yml exec -T solana solana cluster-version; do sleep 2; done'
          timeout 60 bash -c 'until docker compose -f docker/compose.dev.yml exec -T evm cast block-number --rpc-url http://localhost:8545; do sleep 2; done'
          timeout 60 bash -c 'until docker compose -f docker/compose.dev.yml exec -T wormhole curl -f http://localhost:7071/v1/heartbeats; do sleep 5; done'

      - name: Deploy contracts
        env:
          PRIVATE_KEY: ${{ secrets.TEST_PRIVATE_KEY }}
        run: |
          docker compose -f docker/compose.dev.yml exec -T solana bash -c "
            cd contracts/solana-forge && anchor build && anchor deploy --provider.cluster localnet
          "
          docker compose -f docker/compose.dev.yml exec -T evm bash -c "
            cd contracts/evm-receiver && 
            forge script script/Deploy.s.sol --rpc-url http://localhost:8545 --broadcast --private-key $PRIVATE_KEY
          "

      - name: Run end-to-end tests
        run: |
          docker compose -f docker/compose.dev.yml exec -T node bash -c "
            ./scripts/e2e.sh
          "

      - name: Generate test reports
        if: always()
        run: |
          docker compose -f docker/compose.dev.yml exec -T node bash -c "
            mkdir -p /workspace/reports &&
            cp -r scripts/coverage /workspace/reports/ &&
            cp -r web-frame/coverage /workspace/reports/web-frame-coverage
          "

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: reports/

      - name: Cleanup
        if: always()
        run: |
          docker compose -f docker/compose.dev.yml down -v

  security-scan:
    name: Security Scan
    runs-on: ubuntu-22.04
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Semgrep security scan
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/typescript
            p/rust

  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    needs: [test, integration-test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile.node
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-22.04
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment"
          # Add actual deployment steps here

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run performance tests
        run: |
          docker compose -f docker/compose.dev.yml run --rm node bash -c "
            cd web-frame && pnpm test:e2e
          "

      - name: Generate performance report
        run: |
          echo "Performance test results" > performance-report.txt
          # Add actual performance metrics collection

      - name: Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: performance-report.txt

  notify:
    name: Notifications
    runs-on: ubuntu-22.04
    needs: [test, integration-test, security-scan, build-and-push]
    if: always()

    steps:
      - name: Notify on success
        if: needs.test.result == 'success' && needs.integration-test.result == 'success'
        run: |
          echo "✅ All tests passed successfully!"

      - name: Notify on failure
        if: needs.test.result == 'failure' || needs.integration-test.result == 'failure'
        run: |
          echo "❌ Tests failed!"
          exit 1