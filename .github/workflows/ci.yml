name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install root dependencies
      run: npm ci
      
    - name: Install frontend dependencies
      run: cd frontend && npm ci
      
    - name: Install deployment service dependencies
      run: cd deployment-service && npm ci
      
    - name: Install agent dependencies
      run: cd agent && npm ci
      
    - name: Lint root
      run: npm run lint || true
      
    - name: Lint frontend
      run: cd frontend && npm run lint
      
    - name: Lint deployment service
      run: cd deployment-service && npm run lint || true
      
    - name: Lint agent
      run: cd agent && npm run lint || true
      
    - name: Build frontend
      run: cd frontend && npm run build
      
    - name: Run tests
      run: npm test || true

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Create .env file
      run: cp .env.example .env
      
    - name: Build Docker images
      run: docker-compose build --parallel
      
    - name: Test Docker containers
      run: |
        docker-compose up -d arlocal
        sleep 10
        docker-compose up -d deployment-service
        sleep 10
        docker-compose up -d frontend
        sleep 10
        docker-compose ps
        
    - name: Test API health
      run: |
        curl -f http://localhost:3032/health || exit 1
        
    - name: Cleanup
      run: docker-compose down -v

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install dependencies
      run: |
        npm ci
        cd frontend && npm ci
        cd ../deployment-service && npm ci
        cd ../agent && npm ci
        
    - name: Run npm audit
      run: |
        npm audit --audit-level=high || true
        cd frontend && npm audit --audit-level=high || true
        cd ../deployment-service && npm audit --audit-level=high || true
        cd ../agent && npm audit --audit-level=high || true

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [lint-and-test, docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint-and-test, docker-build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
