import React, { useState, useEffect } from 'react';
import './App.css';
import ChatInterface from './components/ChatInterface.jsx';
import WalletInterface from './components/WalletInterface.jsx';
import DeploymentInterface from './components/DeploymentInterface.jsx';
import JournalInterface from './components/JournalInterface.jsx';
import AgentProcessorInterface from './components/AgentProcessorInterface.jsx';
import ArweaveService from './services/ArweaveService.js';

function App() {
  const [agentData, setAgentData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [wallet, setWallet] = useState(null);
  const [activeTab, setActiveTab] = useState('chat');
  const [oracleData, setOracleData] = useState(null);

  // Load agent data directly from Arweave
  useEffect(() => {
    const loadInitialData = async () => {
      try {
        setLoading(true);
        
        // Load agent data from Arweave
        const agentInfo = await ArweaveService.loadAgentData();
        setAgentData(agentInfo);

        // Load oracle scrolls
        const scrollsData = await ArweaveService.loadOracleScrolls();
        setOracleData({
          scrolls: scrollsData.scrolls,
          recentActivity: 'loaded from arweave',
          status: 'connected'
        });

        setError(null);
      } catch (err) {
        console.error('Failed to load initial data:', err);
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    loadInitialData();
  }, []);

  const handleWalletConnect = async () => {
    try {
      const walletConnection = await ArweaveService.connectWallet();
      setWallet(walletConnection);
    } catch (error) {
      console.error('Wallet connection failed:', error);
      setError('Failed to connect wallet: ' + error.message);
    }
  };

  const handleWalletDisconnect = () => {
    setWallet(null);
  };

  if (loading) {
    return (
      <div className="app">
        <div className="loading">
          <div className="spinner"></div>
          <p>Loading your RATi agent...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="app">
        <div className="error">
          <h2>⚠️ Connection Error</h2>
          <p>Unable to connect to your RATi agent:</p>
          <code>{error}</code>
          <button onClick={() => window.location.reload()}>Retry</button>
        </div>
      </div>
    );
  }

  return (
    <div className="app">
      <header className="app-header">
        <div className="header-content">
          <h1>🤖 RATi Agent</h1>
          {agentData?.agent && (
            <div className="agent-info">
              <span className="agent-status">●</span>
              <span>Process: {agentData.agent.processId.slice(0, 8)}...</span>
              {oracleData && (
                <span className="oracle-status">
                  🔮 Oracle: {oracleData.recentActivity || 'unknown'}
                </span>
              )}
            </div>
          )}
        </div>
        <nav className="app-nav">
          <button 
            className={`nav-button ${activeTab === 'chat' ? 'active' : ''}`}
            onClick={() => setActiveTab('chat')}
          >
            💬 Chat
          </button>
          <button 
            className={`nav-button ${activeTab === 'journal' ? 'active' : ''}`}
            onClick={() => setActiveTab('journal')}
          >
            📖 Journal
          </button>
          <button 
            className={`nav-button ${activeTab === 'processor' ? 'active' : ''}`}
            onClick={() => setActiveTab('processor')}
          >
            ⚙️ Processor
          </button>
          <button 
            className={`nav-button ${activeTab === 'deploy' ? 'active' : ''}`}
            onClick={() => setActiveTab('deploy')}
          >
            🚀 Deploy
          </button>
        </nav>
      </header>
      
      <main className="app-main">
        {activeTab === 'chat' && (
          <ChatInterface 
            agentData={agentData} 
          />
        )}
        
        {activeTab === 'journal' && (
          <JournalInterface 
            agentData={agentData} 
            arweaveService={ArweaveService}
            wallet={wallet}
            isModal={false}
            isVisible={true}
          />
        )}
        
        {activeTab === 'processor' && (
          <AgentProcessorInterface 
            arweaveService={ArweaveService}
            oracleData={oracleData}
            agentData={agentData}
            wallet={wallet}
          />
        )}
        
        {activeTab === 'deploy' && (
          <div className="deployment-tab">
            <WalletInterface 
              onWalletConnect={handleWalletConnect}
              onWalletDisconnect={handleWalletDisconnect}
              wallet={wallet}
              arweaveService={ArweaveService}
            />
            <DeploymentInterface 
              wallet={wallet}
              arweaveService={ArweaveService}
            />
          </div>
        )}
      </main>
    </div>
  );
}

export default App;
